-- creatrion of table
set schema fn71600@

CREATE TABLE PROFILES
(
	ID INT NOT NULL PRIMARY KEY,
	NAME VARCHAR(50) NOT NULL
);

CREATE TABLE DOCTORS
	(	
	PID CHAR(15) NOT NULL PRIMARY KEY,
	FNAME VARCHAR(20) NOT NULL,
	LNAME VARCHAR(20) NOT NULL,
	ROOM INT NOT NULL CHECK(ROOM >= 100 AND ROOM <= 999),
	PROFID INT REFERENCES PROFILES(ID)
	);
	
	
CREATE TABLE PATIENTS
(
	EGN CHAR(10) NOT NULL PRIMARY KEY,
	NAME VARCHAR(80) NOT NULL,
	ADDRESS VARCHAR(100)
);

CREATE TABLE VISIT
(
	ID INT NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
	EGN CHAR(10) NOT NULL REFERENCES PATIENTS(EGN),
	DOCID CHAR(15) NOT NULL REFERENCES DOCTORS(PID),
	VDATE DATE,
	VTIME TIME
);


-- TASK 01
CREATE TABLE EMPDEPT
	AS
	(
		SELECT EMPNO, LASTNAME, SALARY, DEPTNO, DEPTNAME
		FROM DB2ADMIN.EMPLOYEE, DB2ADMIN.DEPARTMENT
		WHERE WORKDEPT = DEPTNO
	)
	DEFINITION ONLY;
	
ALTER TABLE EMPDEPT
ADD CONSTRAINT PR_EMPDEPT PRIMARY KEY(EMPNO);
	
ALTER TABLE EMPDEPT
ADD CONSTRAINT CK_EMPDEPT_SAL_E11 CHECK(SALARY <= 28000 AND DEPTNO = 'E11');

ALTER TABLE EMPDEPT
DROP CONSTRAINT CK_EMPDEPT_SAL;

ALTER TABLE EMPDEPT
ADD CONSTRAINT CK_EMPDEPT_SAL CHECK(SALARY <= 50000 AND DEPTNO <> 'E11');

ALTER TABLE EMPDEPT
ADD CONSTRAINT CK_EMPDEPT_SAL_E11 CHECK((SALARY <= 28000 AND DEPTNO = 'E11') OR (SALARY <= 50000 AND DEPTNO <> 'E11'));


INSERT INTO EMPDEPT
SELECT EMPNO, LASTNAME, SALARY, DEPTNO, DEPTNAME
	FROM  DB2ADMIN.EMPLOYEE, DB2ADMIN.DEPARTMENT
	WHERE WORKDEPT = DEPTNO
	AND ((SALARY <= 28000 AND DEPTNO = 'E11')
	OR (SALARY <= 50000 AND DEPTNO <> 'E11'));


CREATE TABLE HIGH_SALARY_RAISE (
	EMPNO CHAR(6) NOT NULL PRIMARY KEY,
	PREV_SAL DECIMAL(9, 2) NOT NULL	,
	NEW_SAL DECIMAL(9, 2) NOT NULL
	);
	
ALTER TABLE EMPDEPT 
ADD CONSTRAINT FK_EMPNO
FOREIGN KEY (EMPNO) REFERENCES EMPLOYEE(EMPNO)
ON DELETE CASCADE;

ALTER TABLE EMPDEPT
ADD CONSTRAINT FK_DEPTNO
FOREIGN KEY(DEPTNO) REFERENCES DEPARTMENT(DEPTNO)
ON DELETE RESTRICT;

-- TASK 3 - TRIGGER
CREATE TRIGGER HIGH_SALARY_TRIGGER
AFTER UPDATE OF SALARY ON EMPDEPT
REFERENCING NEW AS N OLD AS O
FOR EACH ROW
MODE DB2SQL
WHEN (N.SALARY > 1.1 * O.SALARY)
	INSERT INTO HIGH_SALARY_RAISE VALUES(O.EMPNO, O.SALARY, N.SALARY);

SELECT * FROM HIGH_SALARY_RAISE;
SELECT * FROM EMPDEPT;
UPDATE EMPDEPT
SET SALARY = 1.2 * SALARY
WHERE EMPNO='000120';

-- TASK 4
SELECT * FROM HIGH_SALARY_RAISE;
SELECT * FROM EMPDEPT;
UPDATE EMPDEPT
SET SALARY = 1.5 * SALARY
WHERE EMPNO='000160';

-- 14,12,17

CREATE FUNCTION GRADUATED(P_EMPNO CHAR(6))
RETURNS DATE
RETURN
	SELECT ((BIRTHDATE) + 7 YEARS + EDLEVEL YEARS) AS GRADE
	FROM DB2ADMIN.EMPLOYEE
	WHERE EMPNO = P_EMPNO;


SELECT LASTNAME, BIRTHDATE, HIREDATE, FN71600.GRADUATED(EMPNO) AS GRADE
FROM DB2ADMIN.EMPLOYEE	 
WHERE WORKDEPT = 'C01';

-- TASK 1
CREATE FUNCTION GET_AGE(P_EMPNO CHAR(6))
RETURNS INT
RETURN 
	SELECT YEAR(CURRENT_DATE - BIRTHDATE)
	FROM DB2ADMIN.EMPLOYEE
	WHERE P_EMPNO = EMPNO;

SELECT LASTNAME, FN71600.GET_AGE(EMPNO)	AS AGE
FROM DB2ADMIN.EMPLOYEE
WHERE FN71600.GET_AGE(EMPNO) > 85
ORDER BY AGE DESC;
	
-- TASK 2
CREATE FUNCTION GET_WORK_AGE(P_EMPNO CHAR(6))
RETURNS INT
RETURN
	SELECT YEAR(CURRENT_DATE - HIREDATE)
	FROM DB2ADMIN.EMPLOYEE
	WHERE P_EMPNO = EMPNO;
	
	
	
-- TAKS 3
CREATE FUNCTION INFO2(DEPTNO CHAR(3))
RETURNS TABLE(NAME VARCHAR(15), SALARY DECIMAL(9, 2))
RETURN
	SELECT LASTNAME, SALARY
	FROM DB2ADMIN.EMPLOYEE
	WHERE WORKDEPT = DEPTNO;
	
SELECT *
FROM TABLE(FN71600.INFO2('C01')) AS T;

-- TASK 4
CREATE VIEW  V_INFO2
AS
	SELECT EMPNO, FN71600.GET_WORK_AGE(EMPNO) AS WORKAGE, FN71600.GET_AGE(EMPNO) AS AGE, SALARY, SEX
	FROM DB2ADMIN.EMPLOYEE
	WHERE (FN71600.GET_AGE(EMPNO) > 59 AND SEX = 'F')
	OR (FN71600.GET_AGE(EMPNO) > 62 AND SEX = 'M');
	
-- TASK 1
SET SCHEMA DB2ADMIN;


SELECT YEAR(HIREDATE), DECIMAL(AVG(SALARY), 9, 2) AS AVG_SALARY, COUNT(*) AS CNT
FROM EMPLOYEE 
WHERE HIREDATE >= '1970-01-01'
AND HIREDATE <= '1980-12-31'
GROUP BY YEAR(HIREDATE)
HAVING COUNT(*) > 1;

-- TASK 2
SET SCHEMA FN71600;
CREATE VIEW MAX_AVG
AS
	SELECT YEAR(HIREDATE) AS YEAR, DECIMAL(AVG(SALARY), 9, 2) AS AVG_SALARY, COUNT(*) AS CNT
	FROM EMPLOYEE 
	WHERE HIREDATE >= '1970-01-01'
	AND HIREDATE <= '1980-12-31'
	GROUP BY YEAR(HIREDATE);
	
	-- НАПРАВИ ВЮ И СЛЕД ТОВА ИЗТЕГЛИ ОТ НЕГО МАКСИМАЛНАТА ЗАПЛАТА С ГОДИНАТА НА НАЕМАНЕ	
	/*
SELECT MAX(AVG_SALARY)
FROM
	(
	MAX_AVG
	) AS T
	INNER JOIN 
	(
	SELECT
	)*/
	
	-- СЕГА БЕЗ ВЮ
CREATE VIEW V_TEST
AS
	SELECT YEAR(HIREDATE) AS YEAR, DECIMAL(AVG(SALARY), 9, 2) AS AVG_SALARY, COUNT(*) AS CNT
	FROM EMPLOYEE 
	WHERE HIREDATE >= '1970-01-01'
	AND HIREDATE <= '1980-12-31'
	GROUP BY YEAR(HIREDATE);
	
SELECT YEAR, MAX_AVG
FROM V_TEST  JOIN ( SELECT MAX(AVG_SALARY) AS MAX_AVG FROM V_TEST ) AS T
ON AVG_SALARY = MAX_AVG;

-- 21.12.2017

CREATE TABLE STAFF
LIKE FN71000.STAFF;

INSERT INTO STAFF
SELECT * FROM FN71000.STAFF;

CREATE PROCEDURE FN71600.GET_INFO(IN V_LEVEL INT)
RESULT SETS 1
P1: BEGIN

	DECLARE C1 CURSOR WITH RETURN FOR
		SELECT EMPNO, LASTNAME, WORKDEPT, BIRTHDATE, SALARY
		FROM FN71600.STAFF
		WHERE EDLEVEL = V_LEVEL;

	OPEN C1;
END @


CALL FN71600.GET_INFO(16) @

DROP PROCEDURE FN71600.GET_INFO @

CREATE PROCEDURE FN71600.GET_INFO(IN V_LEVEL INT, OUT MAX_SALARY DECIMAL(9, 2))
RESULT SETS 2
P1: BEGIN

	DECLARE MAX_SAL DECIMAL(9, 2) DEFAULT 0;


	DECLARE C1 CURSOR WITH RETURN FOR
		SELECT EMPNO, LASTNAME, WORKDEPT, BIRTHDATE, SALARY
		FROM FN71600.STAFF
		WHERE EDLEVEL = V_LEVEL;
		
	DECLARE C2 CURSOR WITH RETURN FOR
		SELECT EMPNO, SALARY 
		FROM FN71600.STAFF
		WHERE SALARY = MAX_SAL;
		
	SET MAX_SAL = (SELECT MAX(SALARY)
		FROM FN71600.STAFF
		WHERE EDLEVEL = V_LEVEL
		);
	SET MAX_SALARY = MAX_SAL;
	
	OPEN C1;
	OPEN C2;
END @


CALL FN71600.GET_INFO(15, ?) @

-----------------------------------------------------------------------------------------------
CREATE PROCEDURE FN71600.LAB3_1(IN V_EMPNO CHAR(6),
								IN RATING SMALLINT, OUT OLD_SALARY DECIMAL(9,2),
								OUT NEW_SALARY DECIMAL(9,2))
P1: BEGIN
	DECLARE SQLSTATE CHAR(5) DEFAULT '00000';
	DECLARE NOT_FOUND CONDITION FOR SQLSTATE '02000';
	DECLARE EXIT HANDLER FOR NOT_FOUND
		RESIGNAL SQLSTATE '70444';
	
	SET OLD_SALARY = (SELECT SALARY FROM FN71600.STAFF WHERE EMPNO = V_EMPNO);
	
	CASE RATING 
		WHEN 1 THEN UPDATE FN71600.STAFF SET SALARY = 1.1*SALARY WHERE EMPNO = V_EMPNO;
		WHEN 2 THEN UPDATE FN71600.STAFF SET SALARY = 1.05*SALARY WHERE EMPNO = V_EMPNO;
		ELSE UPDATE FN71600.STAFF SET SALARY = 1.025*SALARY WHERE EMPNO = V_EMPNO;
	END CASE;
	
	
	SET NEW_SALARY = (SELECT SALARY FROM FN71600.STAFF WHERE EMPNO = V_EMPNO);
	
END @

CALL FN71600.LAB3_1('000130', 1, ?, ?) @

/*
 4. Return the old salary in the third parameter you defined.
__ 5. Use the CASE construct for the updates to CF71.STAFF:
CASE argument
 WHEN argumentvalue1 THEN
 ... ;
 WHEN argumentvalue2 THEN
 ... ;
 ELSE
 ... ;
 END CASE;
__ 6. Return the updated salary in the fourth parameter you defined.
__ 7. Click the File->Save Object menu. 
Student Exercises
Course materials may not be reproduced in whole or in part
without the prior written permission of IBM.
3-4 Stored Procedures © Copyright IBM Corp. 1996, 2003
__ 8. Return to the Development Center desktop.
__ 9. Right-click your stored procedure (CF71.LAB3_1) and choose Build. (You could also
select your stored procedure and then on the toolbar, click the Wrench icon).
__ 10. Make sure that your stored procedure is selected and click the Run icon from the
toolbar (the green triangle).
Specify the variables for the procedure.
 • Enter 310 for the employee ID number.
 • Enter 2 for the rating.
 • Click OK.
What did you see in the Parameters panel?
________________________________________________________________
________________________________________________________________
________________________________________________________________
What did you see in the Messages panel?
________________________________________________________________
________________________________________________________________
________________________________________________________________
__ 11. Click Run icon from the icon list at top of window to execute your procedure.
Specify the variables for the procedure.
 • Enter 1776 for the employee ID number.
 • Enter 2 for the rating.
 • Click OK.
What did you see in the Messages panel?
*/
